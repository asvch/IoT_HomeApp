{"ast":null,"code":"var _jsxFileName = \"/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app/mqtt-dashboard/src/LightStateChart.js\",\n  _s = $RefreshSig$();\n// LightStateChart.js\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:3000\";\nfunction LightStateChart() {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Light State (On=1, Off=0)',\n      data: [],\n      fill: false,\n      backgroundColor: 'blue',\n      borderColor: 'blue'\n    }]\n  });\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT, {\n      transports: [\"websocket\"]\n    });\n    socket.on('mqtt_message', data => {\n      if (data.topic === 'sensors/light') {\n        // Assume data.message is a JSON string with property \"status\"\n        try {\n          const dataObj = JSON.parse(data.message);\n          const status = dataObj.status === 'on' ? 1 : 0;\n          const currentTime = new Date().toLocaleTimeString();\n          setChartData(prevData => {\n            const newLabels = [...prevData.labels, currentTime];\n            const newData = [...prevData.datasets[0].data, status];\n            if (newLabels.length > 20) {\n              newLabels.splice(0, newLabels.length - 20);\n              newData.splice(0, newData.length - 20);\n            }\n            return {\n              labels: newLabels,\n              datasets: [{\n                ...prevData.datasets[0],\n                data: newData\n              }]\n            };\n          });\n        } catch (error) {\n          console.error(\"Error parsing light status data\", error);\n        }\n      }\n    });\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Light State vs. Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(LightStateChart, \"4iljSxxgG2fqVQurNbU+EQ7H59Q=\");\n_c = LightStateChart;\nexport default LightStateChart;\nvar _c;\n$RefreshReg$(_c, \"LightStateChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","socketIOClient","jsxDEV","_jsxDEV","ENDPOINT","LightStateChart","_s","chartData","setChartData","labels","datasets","label","data","fill","backgroundColor","borderColor","socket","transports","on","topic","dataObj","JSON","parse","message","status","currentTime","Date","toLocaleTimeString","prevData","newLabels","newData","length","splice","error","console","disconnect","style","width","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app/mqtt-dashboard/src/LightStateChart.js"],"sourcesContent":["// LightStateChart.js\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\n\nconst ENDPOINT = \"http://localhost:3000\";\n\nfunction LightStateChart() {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Light State (On=1, Off=0)',\n      data: [],\n      fill: false,\n      backgroundColor: 'blue',\n      borderColor: 'blue',\n    }]\n  });\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT, { transports: [\"websocket\"] });\n    socket.on('mqtt_message', (data) => {\n      if (data.topic === 'sensors/light') {\n        // Assume data.message is a JSON string with property \"status\"\n        try {\n          const dataObj = JSON.parse(data.message);\n          const status = dataObj.status === 'on' ? 1 : 0;\n          const currentTime = new Date().toLocaleTimeString();\n          setChartData(prevData => {\n            const newLabels = [...prevData.labels, currentTime];\n            const newData = [...prevData.datasets[0].data, status];\n            if (newLabels.length > 20) {\n              newLabels.splice(0, newLabels.length - 20);\n              newData.splice(0, newData.length - 20);\n            }\n            return {\n              labels: newLabels,\n              datasets: [{\n                ...prevData.datasets[0],\n                data: newData\n              }]\n            };\n          });\n        } catch (error) {\n          console.error(\"Error parsing light status data\", error);\n        }\n      }\n    });\n    return () => socket.disconnect();\n  }, []);\n\n  return (\n    <div style={{ width: '100%', maxWidth: '600px' }}>\n      <h5>Light State vs. Time</h5>\n      <Line data={chartData} />\n    </div>\n  );\n}\n\nexport default LightStateChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}