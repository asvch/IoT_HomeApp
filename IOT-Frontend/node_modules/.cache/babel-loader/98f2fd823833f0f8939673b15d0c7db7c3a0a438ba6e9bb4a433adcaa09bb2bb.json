{"ast":null,"code":"var _jsxFileName = \"/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/LightStateChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst endpoint = \"http://localhost:3000\";\nfunction LightStateChart() {\n  _s();\n  // Load initial chart data from localStorage or use default data\n  const [chartData, setChartData] = useState(() => {\n    const s = localStorage.getItem('lightChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Light State (On=1, Off=0)',\n        data: [],\n        fill: false,\n        backgroundColor: 'blue',\n        borderColor: 'blue'\n      }]\n    };\n  });\n  useEffect(() => {\n    const socket = socketIOClient(endpoint, {\n      transports: [\"websocket\"]\n    });\n    socket.on('mqtt_message', data => {\n      if (data.topic === 'sensors/light') {\n        try {\n          const dataObj = JSON.parse(data.message);\n          // Convert light status to 1 (on) or 0 (off)\n          const status = dataObj.status === 'on' ? 1 : 0;\n          // Get the current time label for the x-axis\n          const currentTime = new Date().toLocaleTimeString();\n          setChartData(prevData => {\n            // Use concat to generate a new array\n            const newLabels = prevData.labels.concat(currentTime);\n            const newData = prevData.datasets[0].data.concat(status);\n            // Keep only the last 20 data points\n            if (newLabels.length > 20) {\n              newLabels.splice(0, newLabels.length - 20);\n              newData.splice(0, newData.length - 20);\n            }\n            // Create an updated chart data object\n            const updatedChartData = {\n              labels: newLabels,\n              datasets: [Object.assign({}, prevData.datasets[0], {\n                data: newData\n              })]\n            };\n            // Persist updated chart data in localStorage\n            localStorage.setItem('lightChartData', JSON.stringify(updatedChartData));\n            return updatedChartData;\n          });\n        } catch (error) {\n          console.error(\"Error parsing light status data\", error);\n        }\n      }\n    });\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Light State vs. Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(LightStateChart, \"ew31LglhabkbAzA7jMijeoF8fs0=\");\n_c = LightStateChart;\nexport default LightStateChart;\nvar _c;\n$RefreshReg$(_c, \"LightStateChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","socketIOClient","jsxDEV","_jsxDEV","endpoint","LightStateChart","_s","chartData","setChartData","s","localStorage","getItem","JSON","parse","labels","datasets","label","data","fill","backgroundColor","borderColor","socket","transports","on","topic","dataObj","message","status","currentTime","Date","toLocaleTimeString","prevData","newLabels","concat","newData","length","splice","updatedChartData","Object","assign","setItem","stringify","error","console","disconnect","style","width","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/LightStateChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\n\nconst endpoint = \"http://localhost:3000\";\n\nfunction LightStateChart() {\n  // Load initial chart data from localStorage or use default data\n  const [chartData, setChartData] = useState(() => {\n    const s = localStorage.getItem('lightChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Light State (On=1, Off=0)',\n        data: [],\n        fill: false,\n        backgroundColor: 'blue',\n        borderColor: 'blue',\n      }]\n    };\n  });\n\n  useEffect(() => {\n    const socket = socketIOClient(endpoint, { transports: [\"websocket\"] });\n\n    socket.on('mqtt_message', (data) => {\n      if (data.topic === 'sensors/light') {\n        try {\n          const dataObj = JSON.parse(data.message);\n          // Convert light status to 1 (on) or 0 (off)\n          const status = dataObj.status === 'on' ? 1 : 0;\n          // Get the current time label for the x-axis\n          const currentTime = new Date().toLocaleTimeString();\n          setChartData(prevData => {\n            // Use concat to generate a new array\n            const newLabels = prevData.labels.concat(currentTime);\n            const newData = prevData.datasets[0].data.concat(status);\n            // Keep only the last 20 data points\n            if (newLabels.length > 20) {\n              newLabels.splice(0, newLabels.length - 20);\n              newData.splice(0, newData.length - 20);\n            }\n            // Create an updated chart data object\n            const updatedChartData = {\n              labels: newLabels,\n              datasets: [\n                Object.assign({}, prevData.datasets[0], { data: newData })\n              ]\n            };\n            // Persist updated chart data in localStorage\n            localStorage.setItem('lightChartData', JSON.stringify(updatedChartData));\n            return updatedChartData;\n          });\n        } catch (error) {\n          console.error(\"Error parsing light status data\", error);\n        }\n      }\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return (\n    <div style={{ width: '100%', maxWidth: '600px' }}>\n      <h5>Light State vs. Time</h5>\n      <Line data={chartData} />\n    </div>\n  );\n}\n\nexport default LightStateChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}