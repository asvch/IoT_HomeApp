{"ast":null,"code":"var _jsxFileName = \"/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/FanChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:3000\";\nfunction FanChart() {\n  _s();\n  // here we load initial chart data from localStorage\n  const [c, setChartData] = useState(() => {\n    const s = localStorage.getItem('fanChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Fan State (On=1, Off=0)',\n        data: [],\n        fill: false,\n        backgroundColor: 'purple',\n        borderColor: 'purple'\n      }]\n    };\n  });\n  useEffect(() => {\n    //initiating socket connection to fan topic and checking on/off\n    const socket = socketIOClient(ENDPOINT, {\n      transports: [\"websocket\"]\n    });\n    socket.on('mqtt_message', data => {\n      if (data.topic === 'sensors/fan') {\n        try {\n          const dataObj = JSON.parse(data.message);\n          const state = dataObj.status;\n          const refState = state === 'on' ? 1 : 0; // changing on/off to 1/0\n          const cTime = new Date().toLocaleTimeString();\n          setChartData(prev => {\n            const newLabels = prev.labels.concat(cTime);\n            const newData = [...prev.datasets[0].data, refState];\n            // Keep only the last 10 data points\n            if (newLabels.length > 10) {\n              newLabels.shift();\n              newData.shift();\n            }\n\n            // Persist updated chart data in localStorage\n            const updatedChartData = {\n              labels: newLabels,\n              datasets: [{\n                ...prev.datasets[0],\n                data: newData\n              }]\n            };\n            localStorage.setItem('fanChartData', JSON.stringify(updatedChartData));\n            return updatedChartData;\n          });\n        } catch (error) {\n          console.error(\"Error parsing fan state data\", error);\n        }\n      }\n    });\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Fan State vs. Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(FanChart, \"v9cR4/nt7zvs2CIW195Ye3MhFzA=\");\n_c = FanChart;\nexport default FanChart;\nvar _c;\n$RefreshReg$(_c, \"FanChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","socketIOClient","jsxDEV","_jsxDEV","ENDPOINT","FanChart","_s","c","setChartData","s","localStorage","getItem","JSON","parse","labels","datasets","label","data","fill","backgroundColor","borderColor","socket","transports","on","topic","dataObj","message","state","status","refState","cTime","Date","toLocaleTimeString","prev","newLabels","concat","newData","length","shift","updatedChartData","setItem","stringify","error","console","disconnect","style","width","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/FanChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\n\nconst ENDPOINT = \"http://localhost:3000\";\n\nfunction FanChart() {\n  // here we load initial chart data from localStorage\n  const [c, setChartData] = useState(() => {\n    const s = localStorage.getItem('fanChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Fan State (On=1, Off=0)',\n        data: [],\n        fill: false,\n        backgroundColor: 'purple',\n        borderColor: 'purple',\n      }]\n    };\n  });\n\n  useEffect(() => {\n    //initiating socket connection to fan topic and checking on/off\n    const socket = socketIOClient(ENDPOINT, { transports: [\"websocket\"] });\n    socket.on('mqtt_message', (data) => {\n      if (data.topic === 'sensors/fan') {\n        try {\n          const dataObj = JSON.parse(data.message);\n          const state = dataObj.status;\n          const refState = state === 'on' ? 1 : 0;// changing on/off to 1/0\n          const cTime = new Date().toLocaleTimeString();\n          setChartData(prev => {\n            const newLabels = prev.labels.concat(cTime);\n            const newData = [...prev.datasets[0].data, refState];\n            // Keep only the last 10 data points\n            if (newLabels.length > 10) {\n              newLabels.shift();\n              newData.shift();\n            }\n\n            // Persist updated chart data in localStorage\n            const updatedChartData = {\n              labels: newLabels,\n              datasets: [{\n                ...prev.datasets[0],\n                data: newData,\n              }]\n            };\n            localStorage.setItem('fanChartData', JSON.stringify(updatedChartData));\n            return updatedChartData;\n          });\n        } catch (error) {\n          console.error(\"Error parsing fan state data\", error);\n        }\n      }\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return (\n    <div style={{ width: '100%', maxWidth: '600px' }}>\n      <h5>Fan State vs. Time</h5>\n      <Line data={c} />\n    </div>\n  );\n}\n\nexport default FanChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}