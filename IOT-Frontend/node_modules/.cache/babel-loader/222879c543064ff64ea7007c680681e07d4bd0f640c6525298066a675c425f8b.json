{"ast":null,"code":"var _jsxFileName = \"/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/DarknessChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:3000\";\nfunction DarknessChart() {\n  _s();\n  // we are loading initial chart data from localStorage \n  const [c, setChartData] = useState(() => {\n    const s = localStorage.getItem('darknessChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Darkness',\n        data: [],\n        fill: false,\n        backgroundColor: 'black',\n        borderColor: 'black'\n      }]\n    };\n  });\n\n  //initializing socket\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT, {\n      transports: [\"websocket\"]\n    });\n\n    // Listening for MQTT messages on the sensors/ldr topic.\n    // We are assuming that the sensor sends a value (float) that directly represents darkness.\n    socket.on('mqtt_message', data => {\n      if (data.topic === 'sensors/ldr') {\n        try {\n          const dataObj = JSON.parse(data.message);\n          const sensorValue = parseFloat(dataObj.brightness);\n          if (!isNaN(sensorValue)) {\n            // Use the sensor value directly as darkness (a decimal between 0 and 1)\n            const darknessValue = sensorValue;\n            const currentTime = new Date().toLocaleTimeString();\n            setChartData(prevData => {\n              const newLabels = [...prevData.labels, currentTime];\n              const newData = [...prevData.datasets[0].data, darknessValue];\n              // Keep only the last 20 data points.\n              if (newLabels.length > 20) {\n                newLabels.splice(0, newLabels.length - 20);\n                newData.splice(0, newData.length - 20);\n              }\n              const updatedChartData = {\n                labels: newLabels,\n                datasets: [{\n                  ...prevData.datasets[0],\n                  data: newData\n                }]\n              };\n              localStorage.setItem('darknessChartData', JSON.stringify(updatedChartData));\n              return updatedChartData;\n            });\n          }\n        } catch (error) {\n          console.error(\"Error parsing LDR sensor data\", error);\n        }\n      }\n    });\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Darkness vs. Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(DarknessChart, \"H499Q9+lHxktg7Jt7lmZRdrIxsA=\");\n_c = DarknessChart;\nexport default DarknessChart;\nvar _c;\n$RefreshReg$(_c, \"DarknessChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","socketIOClient","jsxDEV","_jsxDEV","ENDPOINT","DarknessChart","_s","c","setChartData","s","localStorage","getItem","JSON","parse","labels","datasets","label","data","fill","backgroundColor","borderColor","socket","transports","on","topic","dataObj","message","sensorValue","parseFloat","brightness","isNaN","darknessValue","currentTime","Date","toLocaleTimeString","prevData","newLabels","newData","length","splice","updatedChartData","setItem","stringify","error","console","disconnect","style","width","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/DarknessChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\n\nconst ENDPOINT = \"http://localhost:3000\";\n\nfunction DarknessChart() {\n  // we are loading initial chart data from localStorage \n  const [c, setChartData] = useState(() => {\n    const s = localStorage.getItem('darknessChartData');\n    return s\n      ? JSON.parse(s)\n      : {\n          labels: [],\n          datasets: [{\n            label: 'Darkness',\n            data: [],\n            fill: false,\n            backgroundColor: 'black',\n            borderColor: 'black',\n          }]\n        };\n  });\n\n  //initializing socket\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT, { transports: [\"websocket\"] });\n\n    // Listening for MQTT messages on the sensors/ldr topic.\n    // We are assuming that the sensor sends a value (float) that directly represents darkness.\n    socket.on('mqtt_message', (data) => {\n      if (data.topic === 'sensors/ldr') {\n        try {\n          const dataObj = JSON.parse(data.message);\n          const sensorValue = parseFloat(dataObj.brightness);\n          if (!isNaN(sensorValue)) {\n            // Use the sensor value directly as darkness (a decimal between 0 and 1)\n            const darknessValue = sensorValue;\n            const currentTime = new Date().toLocaleTimeString();\n\n            setChartData(prevData => {\n              const newLabels = [...prevData.labels, currentTime];\n              const newData = [...prevData.datasets[0].data, darknessValue];\n              // Keep only the last 20 data points.\n              if (newLabels.length > 20) {\n                newLabels.splice(0, newLabels.length - 20);\n                newData.splice(0, newData.length - 20);\n              }\n              const updatedChartData = {\n                labels: newLabels,\n                datasets: [{\n                  ...prevData.datasets[0],\n                  data: newData,\n                }]\n              };\n              localStorage.setItem('darknessChartData', JSON.stringify(updatedChartData));\n              return updatedChartData;\n            });\n          }\n        } catch (error) {\n          console.error(\"Error parsing LDR sensor data\", error);\n        }\n      }\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return (\n    <div style={{ width: '100%', maxWidth: '600px' }}>\n      <h5>Darkness vs. Time</h5>\n      <Line data={c} />\n    </div>\n  );\n}\n\nexport default DarknessChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}