{"ast":null,"code":"var _jsxFileName = \"/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/TemperatureChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst endpoint = \"http://localhost:3000\";\nfunction TemperatureChart() {\n  _s();\n  // Load initial chart data from localStorage or use empty data\n  const [c, setChartData] = useState(() => {\n    const s = localStorage.getItem('temperatureChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Temperature (F)',\n        data: [],\n        fill: false,\n        backgroundColor: 'red',\n        borderColor: 'red'\n      }]\n    };\n  });\n  useEffect(() => {\n    // Connect to the Websockets to retrive temp data\n    const socket = socketIOClient(endpoint, {\n      transports: [\"websocket\"]\n    });\n\n    // Listen for MQTT messages for temperature\n    socket.on('mqtt_message', data => {\n      if (data.topic === 'sensors/temperature') {\n        try {\n          //parse the temperature value from the json and use it with t\n          const dataObj = JSON.parse(data.message);\n          const t = parseFloat(dataObj.temperature);\n          if (!isNaN(t)) {\n            // We use current time as label for the chart\n            const cTime = new Date().toLocaleTimeString();\n            //concating the new labels with the new data\n            setChartData(prevData => {\n              const newLabels = prevData.labels.concat(cTime);\n              const newData = prevData.datasets[0].data.concat(t);\n\n              // Limit to last 10 data points by appending \n              // splicing the last 10 readings(labels,data) starting from 0th index on every iteration\n              if (newLabels.length > 10) {\n                newLabels.splice(0, newLabels.length - 10);\n                newData.splice(0, newData.length - 10);\n              }\n\n              // Maintain a new object to overide the new data into chart data\n              const charts = {\n                labels: newLabels,\n                datasets: [Object.assign({}, prevData.datasets[0], {\n                  data: newData\n                })]\n              };\n              localStorage.setItem('temperatureChartData', JSON.stringify(charts));\n              return charts;\n            });\n          }\n        } catch (error) {\n          console.error(\"Error parsing temperature data\", error);\n        }\n      }\n    });\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Temperature vs. Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(TemperatureChart, \"k5JMl1V3ZTFukAMZ0NCqewssJgw=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","socketIOClient","jsxDEV","_jsxDEV","endpoint","TemperatureChart","_s","c","setChartData","s","localStorage","getItem","JSON","parse","labels","datasets","label","data","fill","backgroundColor","borderColor","socket","transports","on","topic","dataObj","message","t","parseFloat","temperature","isNaN","cTime","Date","toLocaleTimeString","prevData","newLabels","concat","newData","length","splice","charts","Object","assign","setItem","stringify","error","console","disconnect","style","width","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/TemperatureChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\n\nconst endpoint = \"http://localhost:3000\";\n\nfunction TemperatureChart() {\n  // Load initial chart data from localStorage or use empty data\n  const [c, setChartData] = useState(() => {\n    const s = localStorage.getItem('temperatureChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Temperature (F)',\n        data: [],\n        fill: false,\n        backgroundColor: 'red',\n        borderColor: 'red',\n      }]\n    };\n  });\n\n  useEffect(() => {\n    // Connect to the Websockets to retrive temp data\n    const socket = socketIOClient(endpoint, { transports: [\"websocket\"] });\n\n    // Listen for MQTT messages for temperature\n    socket.on('mqtt_message', (data) => {\n      if (data.topic === 'sensors/temperature') {\n        try {\n          //parse the temperature value from the json and use it with t\n          const dataObj = JSON.parse(data.message);\n          const t = parseFloat(dataObj.temperature);\n          if (!isNaN(t)) {\n            // We use current time as label for the chart\n            const cTime = new Date().toLocaleTimeString();\n            //concating the new labels with the new data\n            setChartData(prevData => {\n              const newLabels = prevData.labels.concat(cTime);\n              const newData = prevData.datasets[0].data.concat(t);\n              \n              // Limit to last 10 data points by appending \n              // splicing the last 10 readings(labels,data) starting from 0th index on every iteration\n              if (newLabels.length > 10) {\n                newLabels.splice(0, newLabels.length - 10);\n                newData.splice(0, newData.length - 10);\n              }\n\n              // Maintain a new object to overide the new data into chart data\n              const charts = {\n                labels: newLabels,\n                datasets: [\n                  Object.assign({}, prevData.datasets[0], { data: newData })\n                ]\n              };\n              \n              localStorage.setItem('temperatureChartData', JSON.stringify(charts));\n              return charts;\n            });\n          }\n        } catch (error) {\n          console.error(\"Error parsing temperature data\", error);\n        }\n      }\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return (\n    <div style={{ width: '100%', maxWidth: '600px' }}>\n      <h5>Temperature vs. Time</h5>\n      <Line data={c} />\n    </div>\n  );\n}\n\nexport default TemperatureChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}