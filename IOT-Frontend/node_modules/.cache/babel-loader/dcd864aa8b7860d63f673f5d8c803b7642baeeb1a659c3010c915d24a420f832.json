{"ast":null,"code":"var _jsxFileName = \"/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/ControlsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport io from 'socket.io-client';\nimport './ControlsPage.css';\nimport fan from './images/fan.png';\n\n// Connecting to  backend server.js through sockets\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000');\nfunction ControlsPage() {\n  _s();\n  // we initialize with false for off for both fan and led\n  const [fanState, setFanState] = useState(false);\n  const [ledState, setLedState] = useState(false);\n  // setting automatic control to be true initially which means manual is false\n  const [autoControl, setAutoControl] = useState(true);\n\n  // Toggle fan if manual control is enabled\n  const handleFanToggle = () => {\n    if (!autoControl) {\n      const newFanState = !fanState;\n      setFanState(newFanState);\n      // Emit the fan status as a JSON object\n      socket.emit('control_update', {\n        fan: {\n          status: newFanState ? 'on' : 'off'\n        }\n      });\n    }\n  };\n\n  // Toggle LED if manual control is enabled\n  const handleLedToggle = () => {\n    if (!autoControl) {\n      const newLedState = !ledState;\n      setLedState(newLedState);\n      // Emit the LED (light) status as a JSON object\n      socket.emit('control_update', {\n        led: {\n          status: newLedState ? 'on' : 'off'\n        }\n      });\n    }\n  };\n\n  // Toggle automatic climate control.\n  // When enabling automatic control, ensure fan and LED are turned off.\n  const handleAutoControlToggle = () => {\n    const newAutoControl = !autoControl;\n    setAutoControl(newAutoControl);\n    // Emit the control mode as a JSON object (automatic or manual)\n    socket.emit('control_update', {\n      control: {\n        status: newAutoControl ? 'automatic' : 'manual'\n      }\n    });\n\n    // If automatic control is enabled, turn off fan and LED immediately.\n    if (newAutoControl) {\n      if (fanState) {\n        setFanState(false);\n        socket.emit('control_update', {\n          fan: {\n            status: 'off'\n          }\n        });\n      }\n      if (ledState) {\n        setLedState(false);\n        socket.emit('control_update', {\n          led: {\n            status: 'off'\n          }\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"controls-title\",\n        children: \"Smart Home Control Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontFamily: 'cursive'\n        },\n        children: \"Manage your home devices effortlessly\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boxs-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auto-control-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"auto-control-btn\",\n          onClick: handleAutoControlToggle,\n          children: [autoControl ? 'Disable' : 'Enable', \" Automatic Climate Control\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          onClick: handleFanToggle,\n          disabled: autoControl,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fan-container\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: fan,\n              alt: \"Fan Blades\",\n              className: `fan-blades ${fanState ? 'rotate' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Fan: \", fanState ? 'On' : 'Off']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          onClick: handleLedToggle,\n          disabled: autoControl,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://img.icons8.com/fluency/96/000000/light-on.png\",\n            alt: \"Light Icon\",\n            className: `icon light-icon ${ledState ? 'glow' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Light: \", ledState ? 'On' : 'Off']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(ControlsPage, \"KhVWpfsFGNEpov12hc2DWeJy4rI=\");\n_c = ControlsPage;\nexport default ControlsPage;\nvar _c;\n$RefreshReg$(_c, \"ControlsPage\");","map":{"version":3,"names":["React","useState","io","fan","jsxDEV","_jsxDEV","socket","ControlsPage","_s","fanState","setFanState","ledState","setLedState","autoControl","setAutoControl","handleFanToggle","newFanState","emit","status","handleLedToggle","newLedState","led","handleAutoControlToggle","newAutoControl","control","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontFamily","onClick","disabled","src","alt","_c","$RefreshReg$"],"sources":["/Users/ratishkumarsaravanan/Desktop/IOT_latest/iot-app_new/mqtt-dashboard/src/ControlsPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport io from 'socket.io-client';\nimport './ControlsPage.css'; \nimport fan from './images/fan.png';\n\n// Connecting to  backend server.js through sockets\nconst socket = io('http://localhost:3000');\n\nfunction ControlsPage() {\n  // we initialize with false for off for both fan and led\n  const [fanState, setFanState] = useState(false);\n  const [ledState, setLedState] = useState(false);\n  // setting automatic control to be true initially which means manual is false\n  const [autoControl, setAutoControl] = useState(true);\n\n  // Toggle fan if manual control is enabled\n  const handleFanToggle = () => {\n    if (!autoControl) {\n      const newFanState = !fanState;\n      setFanState(newFanState);\n      // Emit the fan status as a JSON object\n      socket.emit('control_update', { fan: { status: newFanState ? 'on' : 'off' } });\n    }\n  };\n\n  // Toggle LED if manual control is enabled\n  const handleLedToggle = () => {\n    if (!autoControl) {\n      const newLedState = !ledState;\n      setLedState(newLedState);\n      // Emit the LED (light) status as a JSON object\n      socket.emit('control_update', { led: { status: newLedState ? 'on' : 'off' } });\n    }\n  };\n\n  // Toggle automatic climate control.\n  // When enabling automatic control, ensure fan and LED are turned off.\n  const handleAutoControlToggle = () => {\n    const newAutoControl = !autoControl;\n    setAutoControl(newAutoControl);\n    // Emit the control mode as a JSON object (automatic or manual)\n    socket.emit('control_update', { control: { status: newAutoControl ? 'automatic' : 'manual' } });\n\n    // If automatic control is enabled, turn off fan and LED immediately.\n    if (newAutoControl) {\n      if (fanState) {\n        setFanState(false);\n        socket.emit('control_update', { fan: { status: 'off' } });\n      }\n      if (ledState) {\n        setLedState(false);\n        socket.emit('control_update', { led: { status: 'off' } });\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      {/* Header Section */}\n      <header className=\"header\">\n        <h1 className=\"controls-title\">Smart Home Control Panel</h1>\n        <p style={{ fontFamily: 'cursive' }}>Manage your home devices effortlessly</p>\n      </header>\n      \n      <div className=\"boxs-container\">\n        <div className=\"auto-control-container\">\n          <button className=\"auto-control-btn\" onClick={handleAutoControlToggle}>\n            {autoControl ? 'Disable' : 'Enable'} Automatic Climate Control\n          </button>\n        </div>\n        <div className=\"controls\">\n          {/* Fan Button */}\n          <button className=\"control-btn\" onClick={handleFanToggle} disabled={autoControl}>\n            <div className=\"fan-container\">\n              <img \n                src={fan}\n                alt=\"Fan Blades\" \n                className={`fan-blades ${fanState ? 'rotate' : ''}`}\n              />\n            </div>\n            <span>Fan: {fanState ? 'On' : 'Off'}</span>\n          </button>\n          {/* Light Button */}\n          <button className=\"control-btn\" onClick={handleLedToggle} disabled={autoControl}>\n            <img \n              src=\"https://img.icons8.com/fluency/96/000000/light-on.png\" \n              alt=\"Light Icon\" \n              className={`icon light-icon ${ledState ? 'glow' : ''}`}\n            />\n            <span>Light: {ledState ? 'On' : 'Off'}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ControlsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}